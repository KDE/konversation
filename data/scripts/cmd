#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
#
# SPDX-FileCopyrightText: 2011 Eike Hein


"""
Used to run a shell command from within Konversation and capture the output.

stdout is sent to the IRC server; stderr is shown only to the user.

"""

import subprocess
import sys

try:
    import konversation.dbus
    konversation.dbus.default_message_prefix = 'cmd: '
except ImportError:
    sys.exit("This script is intended to be run from within Konversation.")

if len(sys.argv) < 4:
    import konversation.i18n
    konversation.i18n.init()
    konversation.dbus.error(i18n("You need to specify a command."))
    sys.exit(1)

command = ' '.join(sys.argv[3:])

result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True).communicate()

stdout = [line.rstrip() for line in result[0].decode('utf-8', 'replace').splitlines() if len(line.strip())]
stderr = [line.rstrip() for line in result[1].decode('utf-8', 'replace').splitlines() if len(line.strip())]

if not stdout and not stderr:
    import konversation.i18n
    konversation.i18n.init()
    konversation.dbus.info(i18n("The command executed successfully, but did not return any output or only whitespace."))
else:
    # Fall back to info if there is no target (usually means we were called from a server tab).
    dispatch = konversation.dbus.say if konversation.dbus.target else konversation.dbus.info

    # Send stdout to IRC server.
    for line in stdout:
        dispatch(line)

    # Show stderr to user.
    for line in stderr:
        konversation.dbus.error(line)
